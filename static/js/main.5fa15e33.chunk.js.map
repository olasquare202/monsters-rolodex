{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","name","email","CardList","monsters","map","id","SearchBox","placeholder","handleChange","type","onChange","App","handledChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAEaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAK,mEAExB,mCAAMH,EAAMI,QAAQC,KAApB,OACA,kCAAKL,EAAMI,QAAQE,MAAnB,WCDKC,G,MAAW,SAAAP,GAAK,OAC7B,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAK,SAAAL,GAAO,OAC5B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQM,WCPVC,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAZ,UAAY,SACZa,KAAK,SACNF,YAAaA,EACbG,SAAUF,MC8CEG,G,wDA9Cd,aAAe,IAAD,8BACZ,gBAkBDC,cAAgB,SAACC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBvC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IALH,E,qDAab,WAAqB,IAAD,OACpBI,MAAO,8CACNC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEX,SAAUoB,S,oBAMzC,WACE,MAAkCC,KAAKN,MAA/Bf,EAAR,EAAQA,SAAUY,EAAlB,EAAkBA,YACZU,EAAmBtB,EAASuB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQC,KAAK2B,cAAcC,SAASb,EAAYY,kBAGlD,OACJ,sBAAK/B,UAAU,MAAf,UACA,oDACI,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAegB,KAAKZ,gBAItB,cAAC,EAAD,CAAUT,SAAUsB,W,GAvCJI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5fa15e33.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={'https://robohash.org/${props.monster.id}?set=set2&size=180x180'} \r\n        />\r\n        <h1> {props.monster.name} </h1>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n<div className='card-list'>\r\n   { props.monsters.map (monster => (\r\n    <Card key={monster.id} monster={monster} />\r\n  ))}\r\n  </div>\r\n);\r\n\r\n","import React from \"react\";\r\nimport './search-box.styles.css';\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n    className = 'search'\r\n    type='search'\r\n   placeholder={placeholder}\r\n   onChange={handleChange}/>\r\n  \r\n);","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  \n constructor() {\n   super();\n\n   this.state = {\n     monsters: [],\n     searchField: ''\n     \n   };\n\n//this.handleChange = this.handleChange.bind(this);\n\n  }\n\n  componentDidMount() {\n  fetch ('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({ monsters: users }));\n  }\n\n  handledChange = (e) => {\n    this.setState({ searchField: e.target.value});\n  };\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    \n    return(\n<div className='App'>\n<h1> Monsters Rolodex </h1>\n    <SearchBox\n    placeholder='search monsters'\n    handleChange= {this.handledChange}\n    \n    />\n   \n  <CardList monsters={filteredMonsters}>  \n  \n  </CardList>\n    </div>\n   \n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}